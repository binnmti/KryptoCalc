@page "/"
@using Calc;
@using KryptoCalc.Shared;
@using KryptoCalc.Client.Select;
@using Toolbelt.Blazor.HotKeys2
@implements IDisposable
@inject HttpClient Http
@inject HotKeys HotKeys
@inject IJSRuntime JS
@inject ICookie cookie

<PageTitle>Index</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-12 col-sm-9">
            <div class="row">
                <div class="col">
                    <input type="text" id="display" class="textbox form-control" value="@_currentNumber" readonly>
                </div>
            </div>
            <div class="row">
                <div class="col text-end">
                    @{
                        if (CoinMarketView.Count != 0)
                        {
                            <img src="@CoinMarketView.Single(x => x.Id == _currentSymbol).Image" class="img-thumbnail" alt="">

                            <select name="pets" id="pet-select" class="selectpicker" @onchange="@CoinSelectionChanged">
                                @{
                                    foreach (var coinMarketView in CoinMarketView)
                                    {
                                        <option data-thumbnail="@coinMarketView.Image" value="@coinMarketView.Id" selected="@(coinMarketView.Id ==_currentSymbol)">@coinMarketView.Name</option>
                                    }
                                }
                            </select>
                            <i class="fa-regular fa-circle-question" data-bs-toggle="popover" data-bs-content="毎日0:00に更新します"></i>
                        }
                        else
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                    }
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="grid">
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("7"))">7</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("8"))">8</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("9"))">9</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("c"))">c</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("☒"))">☒</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("4"))">4</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("5"))">5</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("6"))">6</button>
                        <button class="p-1 btn btn-secondary"></button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("÷"))">÷</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("1"))">1</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("2"))">2</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("3"))">3</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("×"))">×</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("-"))">-</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("±"))">±</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("0"))">0</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("."))">.</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("+"))">+</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("="))">=</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-3 navbar navbar-expand-sm">
            @{
                if (CoinMarketView.Any())
                {
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" aria-controls="offcanvas">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
                        <div class="offcanvas-header">
                            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </div>
                        <div class="offcanvas-body">
                            <ul class="list-group">
                                @{
                                    foreach (var coinMarketView in CoinMarketView)
                                    {
                                        var active = coinMarketView.Id == _currentSymbol ? "active" : "";
                                        <li class="list-group-item text-truncate @active" @onclick="@(s => OnListClick(@coinMarketView.Id))">
                                            <img src="@coinMarketView.Image" class="img-thumbnail" alt="">
                                            @coinMarketView.Price @coinMarketView.Symbol
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        <div class=" d-flex justify-content-end">
                            Powered by <a href="https://www.coingecko.com/" rel="noopener" target="_blank">CoinGecko</a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string _currentNumber = "0";
    private string _currentSymbol = "";
    private CalculatorCalc CalculatorCalc = new();
    private List<CoinMarkets> CoinMarkets = new();
    private List<CoinMarketView> CoinMarketView = new();
    private HotKeysContext HotKeysContext = default!;

    public void Dispose()
    {
        HotKeysContext.Dispose();
    }

    private void OnCalcButtonClick(string str)
    {
        _currentNumber = CalculatorCalc.Add(str);
        decimal.TryParse(_currentNumber.ToString(), out var price);
        CoinMarketView = CoinMarkets.ToCoinMarketView(_currentSymbol, price).ToList();
        StateHasChanged();
    }

    private async Task SetNewSymbolAsync(string newSymbol)
    {
        _currentNumber = CoinMarketView.Single(x => x.Id == newSymbol).Price.ToString();
        _currentSymbol = newSymbol;
        await cookie.SetValue("symbol", _currentSymbol);
    }

    private async void CoinSelectionChanged(ChangeEventArgs eventArgs)
    {
        var newSymbol = eventArgs?.Value?.ToString() ?? "";
        await SetNewSymbolAsync(newSymbol);
    }

    private async void OnListClick(string id)
    {
        await SetNewSymbolAsync(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("blazorInit");
    }

    protected override async Task OnInitializedAsync()
    {
        _currentSymbol = await cookie.GetValue("symbol");
        //TODO:直値
        if (_currentSymbol == "") _currentSymbol = "yen";

        CoinMarkets = await Http.GetFromJsonAsync<List<CoinMarkets>>("home/krypto") ?? new List<CoinMarkets>();
        CoinMarketView = CoinMarkets.ToCoinMarketView(_currentSymbol, 0).ToList();

        HotKeysContext = HotKeys.CreateContext()
        .Add(Key.Num0, OnButtonClick0)
        .Add(Key.Num1, OnButtonClick1)
        .Add(Key.Num2, OnButtonClick2)
        .Add(Key.Num3, OnButtonClick3)
        .Add(Key.Num4, OnButtonClick4)
        .Add(Key.Num5, OnButtonClick5)
        .Add(Key.Num6, OnButtonClick6)
        .Add(Key.Num7, OnButtonClick7)
        .Add(Key.Num8, OnButtonClick8)
        .Add(Key.Num9, OnButtonClick9)
        .Add(Key.C, OnButtonClickC)
        .Add(Key.Plus, OnButtonClickAdd)
        .Add(Key.Minus, OnButtonClickSub)
        .Add(Key.Asterisk, OnButtonClickMul)
        .Add(Key.Slash, OnButtonClickDiv)
        .Add(Key.Equal, OnButtonClickEqual)
        .Add(Key.Period, OnButtonClickDot)
        .Add(Key.Delete, OnButtonClickX);
    }

    private void OnButtonClick0() => OnCalcButtonClick("0");
    private void OnButtonClick1() => OnCalcButtonClick("1");
    private void OnButtonClick2() => OnCalcButtonClick("2");
    private void OnButtonClick3() => OnCalcButtonClick("3");
    private void OnButtonClick4() => OnCalcButtonClick("4");
    private void OnButtonClick5() => OnCalcButtonClick("5");
    private void OnButtonClick6() => OnCalcButtonClick("6");
    private void OnButtonClick7() => OnCalcButtonClick("7");
    private void OnButtonClick8() => OnCalcButtonClick("8");
    private void OnButtonClick9() => OnCalcButtonClick("9");
    private void OnButtonClickC() => OnCalcButtonClick("c");
    private void OnButtonClickX() => OnCalcButtonClick("☒");
    private void OnButtonClickDiv() => OnCalcButtonClick("÷");
    private void OnButtonClickMul() => OnCalcButtonClick("×");
    private void OnButtonClickAdd() => OnCalcButtonClick("+");
    private void OnButtonClickSub() => OnCalcButtonClick("-");
    private void OnButtonClickEqual() => OnCalcButtonClick("=");
    private void OnButtonClickDot() => OnCalcButtonClick(".");
}


