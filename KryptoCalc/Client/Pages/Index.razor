@page "/"
@using Calc;
@using KryptoCalc.Shared;
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col-12">
            <input type="text" id="display" class="form-control" value="@currentCount" readonly>
        </div>
        <select name="pets" id="pet-select" onchange="@CoinSelectionChanged">
            @{
                foreach (var coin in CoinIds)
                {
                    <option value="@coin">@coin</option>
                }
            }
        </select>
    </div>
    <div class="row">
        <div class="col">
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("7"))">7</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("8"))">8</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("9"))">9</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("c"))">c</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("☒"))">☒</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("4"))">4</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("5"))">5</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("6"))">6</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("%"))">%</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("÷"))">÷</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("1"))">1</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("2"))">2</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("3"))">3</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("×"))">×</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("-"))">-</button>
        </div>
    </div>
    <div class="row">
        <div class="col">
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("±"))">±</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("0"))">0</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("."))">.</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("+"))">+</button>
            <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("="))">=</button>
        </div>
    </div>
</div>

@code {
    //TODO:キーボード対応
    private string currentCount = "0";
    private CalculatorCalc CalculatorCalc = new();
    private List<string> CoinIds = new();
    private Dictionary<string, decimal> SymbolItems = new();
    private string preSelected = "yen";

    private void OnButtonClick(string str)
    {
        currentCount = CalculatorCalc.Add(str);
    }

    protected override async Task OnInitializedAsync()
    {
        var coins = await Http.GetFromJsonAsync<Coin[]>("home/krypto");
        CoinIds.Add("yen");
        CoinIds.AddRange(coins.Select(x => x.Id));
        SymbolItems = coins.ToDictionary(x => x.Id, x => x.Price);
    }

    void CoinSelectionChanged(ChangeEventArgs eventArgs)
    {
        var nowSelectd = eventArgs.Value.ToString();

        decimal.TryParse(currentCount, out var result);
        currentCount = SymbolItems.Convert(preSelected, nowSelectd, result).ToString();
        preSelected = nowSelectd;
    }
}