@page "/"
@page "/kryptocalc"
@using KryptoCalc.Shared;
@using KryptoCalc.Client.Select;
@using Toolbelt.Blazor.HotKeys2
@implements IDisposable
@inject HttpClient Http
@inject HotKeys HotKeys
@inject IJSRuntime JS
@inject ICookie cookie
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-md-12 col-lg-7 col-xl-8">
            <div class="row">
                <div class="col">
                    <input type="text" id="display" class="subTextbox form-control" value="@Calc.InputedNumberAndSymbol" readonly>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text" id="display" class="textbox form-control" value="@Calc.CurrentInputNumber" readonly>
                </div>
            </div>
            <div class="row">
                @if (CurrentCoinMarketView.Image != "")
                {
                    @if (CurrentLegalCurrency.Image != "" && !CurrentCoinMarketView.IsLegal)
                    {
                        <div class="col text-top">
                            <img src="@CurrentLegalCurrency.Image" class="img-thumbnail" alt="">
                            <span>=</span>
                            <span>@CurrentLegalCurrency.InputPrice</span>
                            <span>@CurrentLegalCurrency.Symbol</span>
                        </div>
                    }
                    <div class="col text-end">
                        <img src="@CurrentCoinMarketView.Image" class="img-thumbnail" alt="">
                        <span>@CurrentCoinMarketView.Symbol</span>
                    </div>
                }
            </div>
            <div class="row">
                <div class="col">
                    <div class="grid">
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("7"))">7</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("8"))">8</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("9"))">9</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("c"))">c</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("☒"))">☒</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("4"))">4</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("5"))">5</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("6"))">6</button>
                        <button class="p-1 btn btn-secondary" data-bs-toggle="modal" data-bs-target="#exampleModal"></button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("÷"))">÷</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("1"))">1</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("2"))">2</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("3"))">3</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("×"))">×</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("-"))">-</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("±"))">±</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("0"))">0</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("."))">.</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("+"))">+</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("="))">=</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-5 col-xl-4">
            @{
                <div class="navbar navbar-expand-lg">
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" aria-controls="offcanvas">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
                        <div class="offcanvas-header">
                            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </div>
                        <div class="offcanvas-body" style="display: block;">
                            @if (AllCoinMarketView.Any())
                            {
                                <div class="row">
                                    <select id="@CurrentLegalCurrency.Id" class="form-control form-control-sm" @onchange="@OnChangeCurrency">
                                        @{
                                            foreach (var coinMarketView in LegalCurrencyCoinMarketViews)
                                            {
                                                <option value=@(coinMarketView.Id) selected="@(CurrentLegalCurrency.Id == coinMarketView.Id)">@coinMarketView.Name</option>
                                            }
                                        }
                                    </select>
                                </div>
                                <div class="row">
                                    <ul class="list-group">
                                        <li class="list-group-item rounded active mb-3">
                                            @{
                                                if (CurrentCoinMarketView != null)
                                                {
                                                    <div class="row">
                                                        <div class="col text-truncate fw-bold">
                                                            <img src="@CurrentCoinMarketView.Image" class="img-thumbnail" alt="">
                                                            <span>@CurrentCoinMarketView.Name</span>
                                                        </div>
                                                        @if (CurrentCoinMarketView.Id != CurrentLegalCurrency.Id)
                                                        {
                                                            <div class="col text-truncate">
                                                                <span>1@(CurrentCoinMarketView.Symbol) = @(CurrentCoinMarketView.CurrentPrice)@(CurrentLegalCurrency.Symbol)</span>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        </li>
                                    </ul>
                                </div>
                                <div class="row">
                                    <div class="col">
                                        <div class="input-group rounded">
                                            <input type="search" class="form-control form-control-sm rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" value="@SearchText" @oninput="OnChangeSearchText" />
                                            <span class="input-group-text border-0" id="search-addon">
                                                <i class="fas fa-search"></i>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <ul class="list-group">
                                        @{
                                            foreach (var coinMarketView in DisplayCoinMarketView)
                                            {
                                                var active = coinMarketView.Id == CurrentId ? "list-group-item-primary" : "";
                                                <li class="list-group-item list-group-item-action rounded @active" @onclick="@(s => OnCoinMarketViewListClick(@coinMarketView.Id))">
                                                    <div class="row">
                                                        <div class="col text-truncate">
                                                            <img src="@coinMarketView.Image" class="img-thumbnail" alt="">
                                                            <span>@coinMarketView.Name</span>
                                                        </div>
                                                        @if (CurrentLegalCurrency.Id != coinMarketView.Id)
                                                        {
                                                            <div class="col text-truncate">
                                                                <span>1@(coinMarketView.Symbol) = @(coinMarketView.CurrentPrice)@(CurrentLegalCurrency.Symbol)</span>
                                                            </div>
                                                        }
                                                    </div>
                                                    <div class="row">
                                                        <div class="col text-truncate">
                                                            <span>@coinMarketView.InputPrice @coinMarketView.Symbol</span>
                                                        </div>
                                                        <div class="col text-truncate">
                                                            <span>= @CurrentCoinMarketView.InputPrice @CurrentCoinMarketView.Symbol</span>
                                                        </div>
                                                    </div>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </div>
                                <div class="row">
                                    <Pagination PaginatedParameter="@PaginatedParameter"></Pagination>
                                </div>
                            }
                            else
                            {
                                <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
                                    <div class="spinner-border text-success " role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private readonly int DisplayNumber = 10;
    private string CurrentId = "";
    private string SearchText = "";
    private Calc Calc = new();
    private List<CoinMarketView> AllCoinMarketView = new();
    private List<CoinMarketView> LegalCurrencyCoinMarketViews = new();
    private List<CoinMarketView> DisplayCoinMarketView = new();
    private CoinMarketView CurrentLegalCurrency = new("", "", "", "", 0, 0, false);
    private CoinMarketView CurrentCoinMarketView = new("", "", "", "", 0, 0, false);
    private PaginatedParameter PaginatedParameter = new PaginatedParameter(1, 0, 0, 0, "");
    private HotKeysContext HotKeysContext = default!;

    public void Dispose()
        => HotKeysContext.Dispose();

    protected override void OnInitialized()
        => NavigationManager.LocationChanged += OnLocationChanged;

    void IDisposable.Dispose()
        => NavigationManager.LocationChanged -= OnLocationChanged;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("blazorInit");
    }

    protected override async Task OnInitializedAsync()
    {
        //TODO:ToCoinMarketViewsの引数に選択した言語をいれるようにする。今は日本語固定
        LegalCurrencyCoinMarketViews = LegalCurrency.ToCoinMarketViews("").ToList();
        var legalCurrency = await cookie.GetValue("LegalCurrency") ?? LegalCurrencyCoinMarketViews.First().Id;
        CurrentId = await cookie.GetValue("Id") ?? LegalCurrencyCoinMarketViews.First().Id;
        CurrentLegalCurrency = LegalCurrencyCoinMarketViews.Single(x => x.CompareId(legalCurrency));
        CurrentLegalCurrency = CurrentLegalCurrency with { InputPrice = Calc.CurrentInputNumber };
        CurrentCoinMarketView = CurrentLegalCurrency;
        AllCoinMarketView = await Http.GetFromJsonAsync<List<CoinMarketView>>($"coinMarkets?page=0&count=-1") ?? new List<CoinMarketView>();
        AllCoinMarketView.Insert(0, LegalCurrency.GetCoinMarketView(legalCurrency));
        AllCoinMarketView = AllCoinMarketView.UpdateCurrentPrice(legalCurrency);
        SetCoinMarketViewAndPager(1);
        HotKeysContext = GetHotKeysContext();
    }

    private async Task OnChangeCurrency(ChangeEventArgs eventArgs)
    {
        var newCurrency = eventArgs?.Value?.ToString() ?? "";
        await cookie.SetValue("LegalCurrency", newCurrency);
        await cookie.SetValue("Id", newCurrency);

        //1=bitcoinをベースに法定通貨を産出する
        var price = AllCoinMarketView.ElementAt(1).ExChange(CurrentLegalCurrency.Id, newCurrency);
        Calc.Change(CurrentLegalCurrency.InputPrice * price);
        CurrentId = newCurrency;
        CurrentLegalCurrency = LegalCurrencyCoinMarketViews.Single(x => x.CompareId(newCurrency));
        CurrentLegalCurrency = CurrentLegalCurrency with { InputPrice = Calc.CurrentInputNumber };
        CurrentCoinMarketView = CurrentLegalCurrency;
        AllCoinMarketView[0] = LegalCurrency.GetCoinMarketView(newCurrency);
        AllCoinMarketView = AllCoinMarketView.UpdateCurrentPrice(newCurrency);
        SearchText = "";
        SetCoinMarketViewAndPager(1);
        StateHasChanged();
    }

    private async Task OnCoinMarketViewListClick(string id)
    {
        await cookie.SetValue("Id", id);
        CurrentId = id;
        CurrentCoinMarketView = DisplayCoinMarketView.Single(x => x.CompareId(id));
        Calc.Change(CurrentCoinMarketView.InputPrice);
        StateHasChanged();
    }

    //URLの変更など
    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var query = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        var page = query["page"]?.ToString() ?? "1";
        SetCoinMarketViewAndPager(int.Parse(page));
        StateHasChanged();
    }

    private void OnChangeSearchText(ChangeEventArgs eventArgs)
    {
        SearchText = eventArgs?.Value?.ToString() ?? "";
        SetCoinMarketViewAndPager(1);
        StateHasChanged();
    }

    private void OnCalcButtonClick(string str)
    {
        Calc.Input(str);
        DisplayCoinMarketView = DisplayCoinMarketView.UpdateInputPrice(CurrentCoinMarketView, Calc.CurrentInputNumber).ToList();
        CurrentCoinMarketView = CurrentCoinMarketView with { InputPrice = Calc.CurrentInputNumber };
        CurrentLegalCurrency = CurrentLegalCurrency with { InputPrice = CurrentCoinMarketView.CurrentPrice * Calc.CurrentInputNumber };
        StateHasChanged();
    }

    private void SetCoinMarketViewAndPager(int page)
    {
        var skip = (Math.Max(page, 1) - 1) * DisplayNumber;
        var take = DisplayNumber;
        var coinMarketView = AllCoinMarketView.Where(x => x.Id.Contains(SearchText, StringComparison.OrdinalIgnoreCase)
         || x.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase));
        DisplayCoinMarketView = coinMarketView.Skip(skip).Take(take).ToList();
        DisplayCoinMarketView = DisplayCoinMarketView.UpdateInputPrice(CurrentCoinMarketView, Calc.CurrentInputNumber).ToList();
        PaginatedParameter = new PaginatedParameter(page, DisplayNumber, AllCoinMarketView.Count, 3, "kryptocalc?");
    }

    private HotKeysContext GetHotKeysContext()
        => HotKeys.CreateContext()
        .Add(Key.Num0, () => OnCalcButtonClick("0"))
        .Add(Key.Num1, () => OnCalcButtonClick("1"))
        .Add(Key.Num2, () => OnCalcButtonClick("2"))
        .Add(Key.Num3, () => OnCalcButtonClick("3"))
        .Add(Key.Num4, () => OnCalcButtonClick("4"))
        .Add(Key.Num5, () => OnCalcButtonClick("5"))
        .Add(Key.Num6, () => OnCalcButtonClick("6"))
        .Add(Key.Num7, () => OnCalcButtonClick("7"))
        .Add(Key.Num8, () => OnCalcButtonClick("8"))
        .Add(Key.Num9, () => OnCalcButtonClick("9"))
        .Add(Key.C, () => OnCalcButtonClick("C"))
        .Add(Key.Plus, () => OnCalcButtonClick("+"))
        .Add(Key.Minus, () => OnCalcButtonClick("-"))
        .Add(Key.Asterisk, () => OnCalcButtonClick("×"))
        .Add(Key.Slash, () => OnCalcButtonClick("÷"))
        .Add(Key.Equal, () => OnCalcButtonClick("="))
        .Add(Key.Period, () => OnCalcButtonClick("."))
        .Add(Key.Delete, () => OnCalcButtonClick("☒"));
}


