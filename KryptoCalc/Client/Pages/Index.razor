@page "/"
@using Calc;
@using KryptoCalc.Shared;
@using Toolbelt.Blazor.HotKeys2
@implements IDisposable
@inject HttpClient Http
@inject HotKeys HotKeys
@inject IJSRuntime JS

<PageTitle>Index</PageTitle>
<div class="container">
    <div class="row">
        <div class="col">
            <input type="text" id="display" class="textbox form-control" value="@_currentNumber" readonly>
        </div>
    </div>
    <div class="row">
        <div class="col text-end">
            @{
                if (CoinMarketView.Count != 0)
                {
                    <select name="pets" id="pet-select" class="selectpicker" @onchange="@CoinSelectionChanged">
                        @{
                            foreach (var coinMarketView in CoinMarketView)
                            {
                                <option data-thumbnail="@coinMarketView.Image" value="@coinMarketView.Id">@coinMarketView.Name</option>
                            }
                        }
                    </select>
                    <i class="fa-regular fa-circle-question" data-bs-toggle="popover" data-bs-content="毎日0:00に更新します"></i>
                }
                else
                {
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            }
        </div>
    </div>
    <div class="row">
        <div class="col-9">
            <div class="grid">
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("7"))">7</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("8"))">8</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("9"))">9</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("c"))">c</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("☒"))">☒</button>

                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("4"))">4</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("5"))">5</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("6"))">6</button>
                <button class="p-1 btn btn-secondary"></button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("÷"))">÷</button>

                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("1"))">1</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("2"))">2</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("3"))">3</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("×"))">×</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("-"))">-</button>

                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("±"))">±</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("0"))">0</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("."))">.</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("+"))">+</button>
                <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("="))">=</button>
            </div>
        </div>
        <div class="col-3">
            <ul class="list-group">
            @{
                foreach (var coinMarketView in CoinMarketView)
                {
                    <li class="list-group-item">
                        <img src="@coinMarketView.Image" class="img-thumbnail" alt="">
                        @coinMarketView.Price @coinMarketView.Symbol
                    </li>
                }
            }
            </ul>
        </div>
    </div>

</div>



@code {
    //TODO:キーボード対応
    private string _currentNumber = "0";
    private string _preSymbol = "";
    private CalculatorCalc CalculatorCalc = new();
    private List<CoinMarkets> CoinMarkets = new();
    private List<CoinMarketView> CoinMarketView = new();
    private HotKeysContext HotKeysContext;

    public void Dispose()
    {
        HotKeysContext.Dispose();
    }

    private void OnButtonClick(string str)
    {
        _currentNumber = CalculatorCalc.Add(str);
        decimal.TryParse(_currentNumber.ToString(), out var price);
        CoinMarketView = CoinMarkets.ToCoinMarketView(_preSymbol, price).ToList();
        StateHasChanged();
    }

    void CoinSelectionChanged(ChangeEventArgs eventArgs)
    {
        var nowSymbol = eventArgs?.Value?.ToString() ?? "";

        decimal.TryParse(_currentNumber.ToString(), out var price);
        _currentNumber = CoinMarketView.Single(x => x.Id == nowSymbol).Price.ToString();
        _preSymbol = nowSymbol;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("blazorInit");
    }

    protected override async Task OnInitializedAsync()
    {
        CoinMarkets = await Http.GetFromJsonAsync<List<CoinMarkets>>("home/krypto") ?? new List<CoinMarkets>();
        _preSymbol = CoinMarkets.First().Id;
        CoinMarketView = CoinMarkets.ToCoinMarketView(_preSymbol, 0).ToList();

        HotKeysContext = HotKeys.CreateContext()
        .Add(Key.Num0, OnButtonClick0)
        .Add(Key.Num1, OnButtonClick1)
        .Add(Key.Num2, OnButtonClick2)
        .Add(Key.Num3, OnButtonClick3)
        .Add(Key.Num4, OnButtonClick4)
        .Add(Key.Num5, OnButtonClick5)
        .Add(Key.Num6, OnButtonClick6)
        .Add(Key.Num7, OnButtonClick7)
        .Add(Key.Num8, OnButtonClick8)
        .Add(Key.Num9, OnButtonClick9)
        .Add(Key.C, OnButtonClickC)
        .Add(Key.Plus, OnButtonClickAdd)
        .Add(Key.Minus, OnButtonClickSub)
        .Add(Key.Asterisk, OnButtonClickMul)
        .Add(Key.Slash, OnButtonClickDiv)
        .Add(Key.Equal, OnButtonClickEqual)
        .Add(Key.Period, OnButtonClickDot)
        .Add(Key.Delete, OnButtonClickX);
    }

    private void OnButtonClick0() => OnButtonClick("0");
    private void OnButtonClick1() => OnButtonClick("1");
    private void OnButtonClick2() => OnButtonClick("2");
    private void OnButtonClick3() => OnButtonClick("3");
    private void OnButtonClick4() => OnButtonClick("4");
    private void OnButtonClick5() => OnButtonClick("5");
    private void OnButtonClick6() => OnButtonClick("6");
    private void OnButtonClick7() => OnButtonClick("7");
    private void OnButtonClick8() => OnButtonClick("8");
    private void OnButtonClick9() => OnButtonClick("9");
    private void OnButtonClickC() => OnButtonClick("c");
    private void OnButtonClickX() => OnButtonClick("☒");
    private void OnButtonClickDiv() => OnButtonClick("÷");
    private void OnButtonClickMul() => OnButtonClick("×");
    private void OnButtonClickAdd() => OnButtonClick("+");
    private void OnButtonClickSub() => OnButtonClick("-");
    private void OnButtonClickEqual() => OnButtonClick("=");
    private void OnButtonClickDot() => OnButtonClick(".");
}


