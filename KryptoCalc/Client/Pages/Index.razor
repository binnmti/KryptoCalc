@page "/"
@using Calc;
@using KryptoCalc.Shared;
@inject HttpClient Http

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="row">
        <div class="col">
            <input type="text" id="display" class="textbox form-control" value="@currentCount" readonly>
        </div>
    </div>
    <div class="row">
        <div class="col text-end">
            @{
                if (CoinMarkets.Count != 0)
                {
                    <select name="pets" id="pet-select" class="selectpicker" @onchange="@CoinSelectionChanged">
                        @{
                            foreach (var coinMarket in CoinMarkets)
                            {
                                <option data-thumbnail="@coinMarket.Image" value="@coinMarket.Id">@coinMarket.Id</option>
                            }
                        }
                    </select>
                }
            }
        </div>
    </div>
    <div class="grid">
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("7"))">7</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("8"))">8</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("9"))">9</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("c"))">c</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("☒"))">☒</button>

        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("4"))">4</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("5"))">5</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("6"))">6</button>
        <button class="p-1 btn btn-secondary"></button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("÷"))">÷</button>

        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("1"))">1</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("2"))">2</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("3"))">3</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("×"))">×</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("-"))">-</button>

        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("±"))">±</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("0"))">0</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("."))">.</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("+"))">+</button>
        <button class="p-1 btn btn-secondary" @onclick="@(s => OnButtonClick("="))">=</button>
    </div>
</div>

@code {
    //TODO:キーボード対応
    private string currentCount = "0";
    private CalculatorCalc CalculatorCalc = new();
    private List<CoinMarkets> CoinMarkets = new();
    private Dictionary<string, decimal> SymbolItems = new();
    private string preSelected;

    private void OnButtonClick(string str)
    {
        currentCount = CalculatorCalc.Add(str);
    }

    protected override async Task OnInitializedAsync()
    {
        CoinMarkets = await Http.GetFromJsonAsync<List<CoinMarkets>>("home/krypto");
        preSelected = CoinMarkets.First().Id;
        SymbolItems = CoinMarkets.ToDictionary(x => x.Id, x => (decimal)x.CurrentPrice);
    }

    void CoinSelectionChanged(ChangeEventArgs eventArgs)
    {
        var nowSelectd = eventArgs.Value.ToString();

        decimal.TryParse(currentCount.ToString(), out var result);
        currentCount = SymbolItems.Convert(preSelected, nowSelectd, result).ToString();
        preSelected = nowSelectd;
    }
}