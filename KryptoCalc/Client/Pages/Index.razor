@page "/"
@page "/kryptocalc"
@using KryptoCalc.Shared;
@using KryptoCalc.Client.Select;
@using Toolbelt.Blazor.HotKeys2
@implements IDisposable
@inject HttpClient Http
@inject HotKeys HotKeys
@inject IJSRuntime JS
@inject ICookie cookie
@inject NavigationManager NavigationManager

<PageTitle>Index</PageTitle>
<div class="container">
    <div class="row">
        <div class="col-xs-12 col-sm-8 col-md-9 col-lg-7 col-xl-8">
            <div class="row">
                <div class="col">
                    <input type="text" id="display" class="subTextbox form-control" value="@Calc.InputedNumberAndSymbol" readonly>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text" id="display" class="textbox form-control" value="@Calc.CurrentInputNumber" readonly>
                </div>
            </div>
            <div class="row">
                <div class="col text-end">
                    <div>
                        <img src="@CurrentCoinMarketView.Image" class="img-thumbnail" alt="">
                        <input value="@CurrentCoinMarketView.Name" readonly>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="grid">
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("7"))">7</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("8"))">8</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("9"))">9</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("c"))">c</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("☒"))">☒</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("4"))">4</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("5"))">5</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("6"))">6</button>
                        <button class="p-1 btn btn-secondary"></button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("÷"))">÷</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("1"))">1</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("2"))">2</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("3"))">3</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("×"))">×</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("-"))">-</button>

                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("±"))">±</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("0"))">0</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("."))">.</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("+"))">+</button>
                        <button class="p-1 btn btn-secondary" @onclick="@(s => OnCalcButtonClick("="))">=</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-4 col-md-3 col-lg-5 col-xl-4 navbar navbar-expand-sm">
            @{
                if (CoinMarketView.Any())
                {
                    <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" aria-controls="offcanvas">
                        <span class="navbar-toggler-icon"></span>
                    </button>
                    <div class="offcanvas offcanvas-end" tabindex="-1" id="offcanvas" aria-labelledby="offcanvasLabel">
                        <div class="offcanvas-header">
                            <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
                        </div>
                        <div>
                            <select id="@CurrentLegalCurrency.Id" class="form-control form-control-sm" @onchange="@OnChangeCurrency">
                                @{
                                    foreach (var legalCurrencyList in LegalCurrencyList)
                                    {
                                        <option value=@(legalCurrencyList.Id) selected="@(CurrentLegalCurrency.Id == legalCurrencyList.Id)">@legalCurrencyList.Id</option>
                                    }
                                }
                            </select>

                        @*
                    
                            <select id="@DisplayType.Id" class="form-control form-control-sm" @onchange="@OnChangeDisplayType">
                            @{
                                foreach (var item in DisplayType.Items)
                                {
                                    <option value=@(item.Key) selected="@(DisplayType.Value == item.Key)">@item.Value</option>
                                }
                            }
                        </select>
                    *@
                        </div>
                        <div>
                        </div>
                        <div class="offcanvas-body">
                            <ul class="list-group">
                                @{
                                    <li class="list-group-item rounded active mb-3">
                                        @{
                                            if (CurrentCoinMarketView != null)
                                            {
                                                <div class="row">
                                                    <div class="col text-truncate fw-bold">
                                                        <img src="@CurrentCoinMarketView.Image" class="img-thumbnail" alt="">
                                                        <span>@CurrentCoinMarketView.Name</span>
                                                    </div>
                                                    <div class="col text-truncate">
                                                        <span>1@(CurrentCoinMarketView.Symbol) = @(CurrentCoinMarketView.CurrentPrice)@(CurrentLegalCurrency.Symbol)</span>
                                                    </div>
                                                </div>
                                                <div class="row">
                                                    <div class="col text-truncate">
                                                        <span>@CurrentCoinMarketView.InputPrice @CurrentLegalCurrency.Symbol</span>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </li>
                                    foreach (var coinMarketView in CoinMarketView)
                                    {
                                        var active = coinMarketView.Id == _currentSymbol ? "list-group-item-primary" : "";
                                        <li class="list-group-item list-group-item-action rounded @active" @onclick="@(s => OnListClick(@coinMarketView.Id))">
                                            @{
                                                if (DisplayType.Value == "1")
                                                {
                                                    <div class="row">
                                                        <div class="col text-truncate">
                                                            <img src="@coinMarketView.Image" class="img-thumbnail" alt="">
                                                            <span>@coinMarketView.Name</span>
                                                        </div>
                                                        <div class="col text-truncate">
                                                            <span>@coinMarketView.InputPrice @CurrentLegalCurrency.Symbol</span>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="row">
                                                        <div class="col text-truncate">
                                                            <img src="@coinMarketView.Image" class="img-thumbnail" alt="">
                                                            <span>@coinMarketView.Name</span>
                                                        </div>
                                                        <div class="col text-truncate">
                                                            <span>1@(coinMarketView.Symbol) = @(coinMarketView.CurrentPrice)@(CurrentLegalCurrency.Symbol)</span>
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col text-truncate">
                                                            <span>@coinMarketView.InputPrice @coinMarketView.Symbol</span>
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                        <div>
                            <Pagination PaginatedParameter="@PaginatedParameter" ></Pagination>
                        </div>
                        <div class=" d-flex justify-content-end">
                            Powered by <a href="https://www.coingecko.com/" rel="noopener" target="_blank">CoinGecko</a>
                        </div>
                    </div>
                }
                else
                {
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private string _currentSymbol = "";
    private string _currentCurrency = "";
    private int _pageNumer = 0;
    private int _displayType = 0;
    private readonly int _displayNumber = 10;
    private Calc Calc = new();
    private CoinMarketView CurrentCoinMarketView = new("", "", "", "", 0, 0);
    private List<CoinMarketView> CoinMarketView = new();
    private CoinMarkets CurrentLegalCurrency = new("", "", "", "", 0);
    private List<CoinMarkets> LegalCurrencyList = new();
    private PaginatedParameter PaginatedParameter = default!;
    private HotKeysContext HotKeysContext = default!;
    private IViewSelect DisplayType = new DisplayType();

    private async Task SetNewSymbolAsync(string newSymbol)
    {
        CurrentCoinMarketView = CoinMarketView.Single(x => x.Id == newSymbol);
        _currentSymbol = newSymbol;
        Calc.Change(CurrentCoinMarketView.InputPrice.ToString());
        await cookie.SetValue("symbol", _currentSymbol);
    }

    private async Task SetNewCurrencyAsync(string newCurrency)
    {
        _currentSymbol = newCurrency;
        await cookie.SetValue("currency", _currentSymbol);
    }

    private async Task ChangeDisplayNumber(string page, string displayType)
    {
        _pageNumer = int.Parse(page);
        _displayType = int.Parse(displayType);
        DisplayType.Value = displayType;
        CoinMarketView = await Http.GetFromJsonAsync<List<CoinMarketView>>($"coinMarkets?page={page}&count={_displayNumber}&id={CurrentLegalCurrency.Id}") ?? new List<CoinMarketView>();
        var total = await Http.GetFromJsonAsync<int>($"coinMarketsCount");
        await cookie.SetValue("DisplayType", DisplayType.Value);
        CoinMarketView = CoinMarketView.ToCoinMarketView(_currentSymbol, CurrentCoinMarketView.CurrentPrice, Calc.CurrentInputNumber).ToList();
        PaginatedParameter = new PaginatedParameter(_pageNumer, _displayNumber, total, 3, "kryptocalc?");
        StateHasChanged();
    }

    public void Dispose()
        => HotKeysContext.Dispose();

    protected override void OnInitialized()
        => NavigationManager.LocationChanged += OnLocationChanged;

    void IDisposable.Dispose()
        => NavigationManager.LocationChanged -= OnLocationChanged;

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var query = HttpUtility.ParseQueryString(new Uri(NavigationManager.Uri).Query);
        var page = query["page"]?.ToString() ?? "";
        var count = query["count"]?.ToString() ?? "";
        await ChangeDisplayNumber(page, count);
        StateHasChanged();
    }

    private async void OnChangeCurrency(ChangeEventArgs eventArgs)
    {
        var newCurrency = eventArgs?.Value?.ToString() ?? "";
        await SetNewCurrencyAsync(newCurrency);

        CurrentLegalCurrency = LegalCurrencyList.Single(x => x.Id == newCurrency);
        var displayType = await cookie.GetValue("DisplayType");
        await ChangeDisplayNumber("1", displayType);
    }

    private async void OnChangeDisplayType(ChangeEventArgs eventArgs)
    {
        var newDisplay = eventArgs?.Value?.ToString() ?? "";
        await ChangeDisplayNumber("1", newDisplay);
    }

    private async void OnListClick(string id)
    {
        await SetNewSymbolAsync(id);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("blazorInit");
    }

    private void OnCalcButtonClick(string str)
    {
        Calc.Input(str);
        CoinMarketView = CoinMarketView.ToCoinMarketView(_currentSymbol, CurrentCoinMarketView.CurrentPrice, Calc.CurrentInputNumber).ToList();
        CurrentCoinMarketView = CoinMarketView.Single(x => string.Compare(x.Id, _currentSymbol, true) == 0);
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        LegalCurrencyList = CurrencyList.GetCurrencyCoinMarkets();

        _currentCurrency = await cookie.GetValue("currency");
        if (_currentCurrency == "")
        {
            _currentCurrency = LegalCurrencyList.First().Id;
        }
        _currentSymbol = await cookie.GetValue("symbol");
        if (_currentSymbol == "")
        {
            _currentSymbol = _currentCurrency;
        }
        CurrentLegalCurrency = LegalCurrencyList.Single(x => string.Compare(x.Id,_currentCurrency, true) == 0);

        var displayType = await cookie.GetValue("DisplayType");
        if (displayType == "") displayType = DisplayType.Default;

        await ChangeDisplayNumber("1", displayType);
        await SetNewSymbolAsync(_currentSymbol);
        await SetNewCurrencyAsync(_currentCurrency);

        HotKeysContext = HotKeys.CreateContext()
        .Add(Key.Num0, () => OnCalcButtonClick("0"))
        .Add(Key.Num1, () => OnCalcButtonClick("1"))
        .Add(Key.Num2, () => OnCalcButtonClick("2"))
        .Add(Key.Num3, () => OnCalcButtonClick("3"))
        .Add(Key.Num4, () => OnCalcButtonClick("4"))
        .Add(Key.Num5, () => OnCalcButtonClick("5"))
        .Add(Key.Num6, () => OnCalcButtonClick("6"))
        .Add(Key.Num7, () => OnCalcButtonClick("7"))
        .Add(Key.Num8, () => OnCalcButtonClick("8"))
        .Add(Key.Num9, () => OnCalcButtonClick("9"))
        .Add(Key.C, () => OnCalcButtonClick("C"))
        .Add(Key.Plus, () => OnCalcButtonClick("+"))
        .Add(Key.Minus, () => OnCalcButtonClick("-"))
        .Add(Key.Asterisk, () => OnCalcButtonClick("×"))
        .Add(Key.Slash, () => OnCalcButtonClick("÷"))
        .Add(Key.Equal, () => OnCalcButtonClick("="))
        .Add(Key.Period, () => OnCalcButtonClick("."))
        .Add(Key.Delete, () => OnCalcButtonClick("☒"));
    }
}


